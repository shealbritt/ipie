/n/home06/mbritt/.conda/envs/afqmc_env/bin/pip
Requirement already satisfied: pip in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (25.0.1)
Requirement already satisfied: pyscf in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (2.6.2)
Requirement already satisfied: jax in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (0.4.28)
Requirement already satisfied: scipy in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (1.14.0)
Requirement already satisfied: numpy in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (2.0.0)
Requirement already satisfied: matplotlib in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (3.9.1)
Requirement already satisfied: h5py>=2.7 in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (from pyscf) (3.11.0)
Requirement already satisfied: setuptools in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (from pyscf) (70.3.0)
Requirement already satisfied: ml-dtypes>=0.2.0 in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (from jax) (0.4.0)
Requirement already satisfied: opt-einsum in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (from jax) (3.3.0)
Requirement already satisfied: contourpy>=1.0.1 in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (from matplotlib) (1.2.1)
Requirement already satisfied: cycler>=0.10 in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (from matplotlib) (0.12.1)
Requirement already satisfied: fonttools>=4.22.0 in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (from matplotlib) (4.53.1)
Requirement already satisfied: kiwisolver>=1.3.1 in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (from matplotlib) (1.4.5)
Requirement already satisfied: packaging>=20.0 in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (from matplotlib) (24.1)
Requirement already satisfied: pillow>=8 in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (from matplotlib) (10.4.0)
Requirement already satisfied: pyparsing>=2.3.1 in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (from matplotlib) (3.1.2)
Requirement already satisfied: python-dateutil>=2.7 in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (from matplotlib) (2.9.0)
Requirement already satisfied: six>=1.5 in /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)
# packages in environment at /n/home06/mbritt/.conda/envs/afqmc_env:
#
# Name                    Version                   Build  Channel
_libgcc_mutex             0.1                 conda_forge    conda-forge
_openmp_mutex             4.5                  2_kmp_llvm    conda-forge
alsa-lib                  1.2.12               h4ab18f5_0    conda-forge
attr                      2.5.1                h166bdaf_1    conda-forge
beartype                  0.18.5                   pypi_0    pypi
brotli                    1.1.0                hd590300_1    conda-forge
brotli-bin                1.1.0                hd590300_1    conda-forge
bzip2                     1.0.8                h4bc722e_7    conda-forge
c-ares                    1.32.2               h4bc722e_0    conda-forge
ca-certificates           2024.7.4             hbcca054_0    conda-forge
cached-property           1.5.2                hd8ed1ab_1    conda-forge
cached_property           1.5.2              pyha770c72_1    conda-forge
cairo                     1.18.0               hbb29018_2    conda-forge
certifi                   2024.7.4           pyhd8ed1ab_0    conda-forge
contourpy                 1.2.1           py312h8572e83_0    conda-forge
cycler                    0.12.1             pyhd8ed1ab_0    conda-forge
dbus                      1.13.6               h5008d03_3    conda-forge
expat                     2.6.2                h59595ed_0    conda-forge
font-ttf-dejavu-sans-mono 2.37                 hab24e00_0    conda-forge
font-ttf-inconsolata      3.000                h77eed37_0    conda-forge
font-ttf-source-code-pro  2.038                h77eed37_0    conda-forge
font-ttf-ubuntu           0.83                 h77eed37_2    conda-forge
fontconfig                2.14.2               h14ed4e7_0    conda-forge
fonts-conda-ecosystem     1                             0    conda-forge
fonts-conda-forge         1                             0    conda-forge
fonttools                 4.53.1          py312h41a817b_0    conda-forge
freetype                  2.12.1               h267a509_2    conda-forge
gettext                   0.22.5               h59595ed_2    conda-forge
gettext-tools             0.22.5               h59595ed_2    conda-forge
glib                      2.80.3               h8a4344b_1    conda-forge
glib-tools                2.80.3               h73ef956_1    conda-forge
graphite2                 1.3.13            h59595ed_1003    conda-forge
gst-plugins-base          1.24.5               hbaaba92_0    conda-forge
gstreamer                 1.24.5               haf2f30d_0    conda-forge
h5py                      3.11.0          nompi_py312hb7ab980_102    conda-forge
harfbuzz                  8.5.0                hfac3d4d_0    conda-forge
hdf5                      1.14.3          nompi_hdf9ad27_105    conda-forge
icu                       73.2                 h59595ed_0    conda-forge
importlib-metadata        8.0.0              pyha770c72_0    conda-forge
importlib_metadata        8.0.0                hd8ed1ab_0    conda-forge
iniconfig                 2.0.0                    pypi_0    pypi
ipie                      0.7.1                    pypi_0    pypi
jax                       0.4.28             pyhd8ed1ab_0    conda-forge
jaxlib                    0.4.28          cpu_py312h17e8b90_0    conda-forge
keyutils                  1.6.1                h166bdaf_0    conda-forge
kiwisolver                1.4.5           py312h8572e83_1    conda-forge
krb5                      1.21.3               h659f571_0    conda-forge
lame                      3.100             h166bdaf_1003    conda-forge
lcms2                     2.16                 hb7c19ff_0    conda-forge
ld_impl_linux-64          2.40                 hf3520f5_7    conda-forge
lerc                      4.0.0                h27087fc_0    conda-forge
libabseil                 20240116.2      cxx17_he02047a_1    conda-forge
libaec                    1.1.3                h59595ed_0    conda-forge
libasprintf               0.22.5               h661eb56_2    conda-forge
libasprintf-devel         0.22.5               h661eb56_2    conda-forge
libblas                   3.9.0           22_linux64_openblas    conda-forge
libbrotlicommon           1.1.0                hd590300_1    conda-forge
libbrotlidec              1.1.0                hd590300_1    conda-forge
libbrotlienc              1.1.0                hd590300_1    conda-forge
libcap                    2.69                 h0f662aa_0    conda-forge
libcblas                  3.9.0           22_linux64_openblas    conda-forge
libcint                   6.1.2                h4ab18f5_0    conda-forge
libclang-cpp15            15.0.7          default_h127d8a8_5    conda-forge
libclang13                18.1.8          default_h6ae225f_0    conda-forge
libcups                   2.3.3                h4637d8d_4    conda-forge
libcurl                   8.8.0                hca28451_1    conda-forge
libdeflate                1.20                 hd590300_0    conda-forge
libedit                   3.1.20191231         he28a2e2_2    conda-forge
libev                     4.33                 hd590300_2    conda-forge
libevent                  2.1.12               hf998b51_1    conda-forge
libexpat                  2.6.2                h59595ed_0    conda-forge
libffi                    3.4.2                h7f98852_5    conda-forge
libflac                   1.4.3                h59595ed_0    conda-forge
libgcc-ng                 14.1.0               h77fa898_0    conda-forge
libgcrypt                 1.11.0               h4ab18f5_0    conda-forge
libgettextpo              0.22.5               h59595ed_2    conda-forge
libgettextpo-devel        0.22.5               h59595ed_2    conda-forge
libgfortran-ng            14.1.0               h69a702a_0    conda-forge
libgfortran5              14.1.0               hc5f4f2c_0    conda-forge
libglib                   2.80.3               h8a4344b_1    conda-forge
libgpg-error              1.50                 h4f305b6_0    conda-forge
libgrpc                   1.62.2               h15f2491_0    conda-forge
libiconv                  1.17                 hd590300_2    conda-forge
libjpeg-turbo             3.0.0                hd590300_1    conda-forge
liblapack                 3.9.0           22_linux64_openblas    conda-forge
libllvm15                 15.0.7               hb3ce162_4    conda-forge
libllvm18                 18.1.8               h8b73ec9_1    conda-forge
libnghttp2                1.58.0               h47da74e_1    conda-forge
libnsl                    2.0.1                hd590300_0    conda-forge
libogg                    1.3.5                h4ab18f5_0    conda-forge
libopenblas               0.3.27          pthreads_hac2b453_1    conda-forge
libopus                   1.3.1                h7f98852_1    conda-forge
libpng                    1.6.43               h2797004_0    conda-forge
libpq                     16.3                 ha72fbe1_0    conda-forge
libprotobuf               4.25.3               h08a7969_0    conda-forge
libre2-11                 2023.09.01           h5a48ba9_2    conda-forge
libsndfile                1.2.2                hc60ed4a_1    conda-forge
libsqlite                 3.46.0               hde9e2c9_0    conda-forge
libssh2                   1.11.0               h0841786_0    conda-forge
libstdcxx-ng              14.1.0               hc0a3c3a_0    conda-forge
libsystemd0               255                  h3516f8a_1    conda-forge
libtiff                   4.6.0                h1dd3fc0_3    conda-forge
libuuid                   2.38.1               h0b41bf4_0    conda-forge
libvorbis                 1.3.7                h9c3ff4c_0    conda-forge
libwebp-base              1.4.0                hd590300_0    conda-forge
libxc-c                   6.2.2            cpu_h1b64f48_4    conda-forge
libxcb                    1.16                 hd590300_0    conda-forge
libxcrypt                 4.4.36               hd590300_1    conda-forge
libxkbcommon              1.7.0                h2c5496b_1    conda-forge
libxml2                   2.12.7               h4c95cb1_3    conda-forge
libzlib                   1.3.1                h4ab18f5_1    conda-forge
llvm-openmp               18.1.8               hf5423f3_0    conda-forge
llvmlite                  0.43.0                   pypi_0    pypi
lz4-c                     1.9.4                hcb278e6_0    conda-forge
markdown-it-py            3.0.0                    pypi_0    pypi
matplotlib                3.9.1           py312h7900ff3_0    conda-forge
matplotlib-base           3.9.1           py312h9201f00_0    conda-forge
mdurl                     0.1.2                    pypi_0    pypi
ml_dtypes                 0.4.0           py312h1d6d2e6_1    conda-forge
mpg123                    1.32.6               h59595ed_0    conda-forge
multipledispatch          1.0.0                    pypi_0    pypi
munkres                   1.1.4              pyh9f0ad1d_0    conda-forge
mysql-common              8.3.0                hf1915f5_4    conda-forge
mysql-libs                8.3.0                hca2cd23_4    conda-forge
ncurses                   6.5                  h59595ed_0    conda-forge
nspr                      4.35                 h27087fc_0    conda-forge
nss                       3.102                h593d115_0    conda-forge
numba                     0.60.0                   pypi_0    pypi
numpy                     2.0.0           py312h22e1c76_0    conda-forge
numpyro                   0.17.0                   pypi_0    pypi
openjpeg                  2.5.2                h488ebb8_0    conda-forge
openssl                   3.3.1                h4bc722e_2    conda-forge
opt-einsum                3.3.0                hd8ed1ab_2    conda-forge
opt_einsum                3.3.0              pyhc1e730c_2    conda-forge
packaging                 24.1               pyhd8ed1ab_0    conda-forge
pandas                    2.2.2                    pypi_0    pypi
pcre2                     10.44                h0f59acf_0    conda-forge
pillow                    10.4.0          py312h287a98d_0    conda-forge
pip                       25.0.1                   pypi_0    pypi
pixman                    0.43.2               h59595ed_0    conda-forge
pluggy                    1.5.0                    pypi_0    pypi
plum-dispatch             2.5.2                    pypi_0    pypi
ply                       3.11               pyhd8ed1ab_2    conda-forge
pthread-stubs             0.4               h36c2ea0_1001    conda-forge
pulseaudio-client         17.0                 hb77b528_0    conda-forge
pybind11-abi              4                    hd8ed1ab_3    conda-forge
pygments                  2.18.0                   pypi_0    pypi
pyparsing                 3.1.2              pyhd8ed1ab_0    conda-forge
pyqt                      5.15.9          py312h949fe66_5    conda-forge
pyqt5-sip                 12.12.2         py312h30efb56_5    conda-forge
pyscf                     2.6.2           py312h974a264_0    conda-forge
pytest                    8.2.2                    pypi_0    pypi
python                    3.12.4          h194c7f8_0_cpython    conda-forge
python-dateutil           2.9.0              pyhd8ed1ab_0    conda-forge
python_abi                3.12                    4_cp312    conda-forge
pytz                      2024.1                   pypi_0    pypi
qhull                     2020.2               h434a139_5    conda-forge
qt-main                   5.15.8              ha2b5568_22    conda-forge
re2                       2023.09.01           h7f4b329_2    conda-forge
readline                  8.2                  h8228510_1    conda-forge
rich                      13.7.1                   pypi_0    pypi
scipy                     1.14.0          py312hc2bc53b_1    conda-forge
setuptools                70.3.0             pyhd8ed1ab_0    conda-forge
sip                       6.7.12          py312h30efb56_0    conda-forge
six                       1.16.0             pyh6c4a22f_0    conda-forge
tk                        8.6.13          noxft_h4845f30_101    conda-forge
toml                      0.10.2             pyhd8ed1ab_0    conda-forge
tomli                     2.0.1              pyhd8ed1ab_0    conda-forge
tornado                   6.4.1           py312h9a8786e_0    conda-forge
tqdm                      4.67.1                   pypi_0    pypi
typing-extensions         4.12.2                   pypi_0    pypi
tzdata                    2024.1                   pypi_0    pypi
wheel                     0.43.0             pyhd8ed1ab_1    conda-forge
xcb-util                  0.4.1                hb711507_2    conda-forge
xcb-util-image            0.4.0                hb711507_2    conda-forge
xcb-util-keysyms          0.4.1                hb711507_0    conda-forge
xcb-util-renderutil       0.3.10               hb711507_0    conda-forge
xcb-util-wm               0.4.2                hb711507_0    conda-forge
xcfun                     2.1.1                h5b9907d_7    conda-forge
xkeyboard-config          2.42                 h4ab18f5_0    conda-forge
xorg-kbproto              1.0.7             h7f98852_1002    conda-forge
xorg-libice               1.1.1                hd590300_0    conda-forge
xorg-libsm                1.2.4                h7391055_0    conda-forge
xorg-libx11               1.8.9                hb711507_1    conda-forge
xorg-libxau               1.0.11               hd590300_0    conda-forge
xorg-libxdmcp             1.1.3                h7f98852_0    conda-forge
xorg-libxext              1.3.4                h0b41bf4_2    conda-forge
xorg-libxrender           0.9.11               hd590300_0    conda-forge
xorg-renderproto          0.11.1            h7f98852_1002    conda-forge
xorg-xextproto            7.3.0             h0b41bf4_1003    conda-forge
xorg-xf86vidmodeproto     2.3.1             h7f98852_1002    conda-forge
xorg-xproto               7.0.31            h7f98852_1007    conda-forge
xz                        5.2.6                h166bdaf_0    conda-forge
zipp                      3.19.2             pyhd8ed1ab_0    conda-forge
zlib                      1.3.1                h4ab18f5_1    conda-forge
zstd                      1.5.6                ha6fb4c9_0    conda-forge
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:17 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.052917721092 AA    0.000000000000   0.000000000000   0.100000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 10
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.30


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpboqjq2up
max_memory 4000 MB (current use 143 MB)
cond(S) = 782.3937338634618
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -3.3566919568544282  E_coul = 0.7554331072026679
init E= 7.39874115034824
    CPU time for initialize scf      0.14 sec, wall time      1.79 sec
  HOMO = -0.938375954303151  LUMO = 2.2962398891641
  mo_energy =
[-0.93837595  2.29623989]
E1 = -3.406279731778276  E_coul = 0.7742082187747943
cycle= 1 E= 7.36792848699652  delta_E= -0.0308  |g|= 2.68e-15  |ddm|= 0.79
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.928931647114344  LUMO = 2.31490830207129
  mo_energy =
[-0.92893165  2.3149083 ]
E1 = -3.4062797317782754  E_coul = 0.7742082187747943
cycle= 2 E= 7.36792848699652  delta_E=    0  |g|= 8.75e-16  |ddm|= 3.05e-14
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.928931647114344  LUMO = 2.31490830207133
  mo_energy =
[-0.92893165  2.3149083 ]
E1 = -3.4062797317782754  E_coul = 0.7742082187747943
Extra cycle  E= 7.36792848699652  delta_E=    0  |g|= 8.75e-16  |ddm|=    0
    CPU time for scf_cycle      0.15 sec, wall time      1.80 sec
    CPU time for SCF      0.15 sec, wall time      1.80 sec
converged SCF energy = 7.36792848699652
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.105835442184 AA    0.000000000000   0.000000000000   0.200000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 5
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.45


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpy10_nl2p
max_memory 4000 MB (current use 159 MB)
cond(S) = 196.78366350321696
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -3.3036841577537412  E_coul = 0.7568094877155749
init E= 2.45312532996183
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.918980839715266  LUMO = 2.0905108363095
  mo_energy =
[-0.91898084  2.09051084]
E1 = -3.3666018858361513  E_coul = 0.7718781613293639
cycle= 1 E= 2.40527627549321  delta_E= -0.0478  |g|= 2.11e-15  |ddm|= 0.791
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.911422781588711  LUMO = 2.11070143101536
  mo_energy =
[-0.91142278  2.11070143]
E1 = -3.36660188583615  E_coul = 0.771878161329363
cycle= 2 E= 2.40527627549321  delta_E=    0  |g|= 3.56e-15  |ddm|= 1.07e-14
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.911422781588712  LUMO = 2.11070143101536
  mo_energy =
[-0.91142278  2.11070143]
E1 = -3.36660188583615  E_coul = 0.771878161329363
Extra cycle  E= 2.40527627549321  delta_E=    0  |g|= 2.26e-16  |ddm|= 1e-14
    CPU time for scf_cycle      0.02 sec, wall time      0.03 sec
    CPU time for SCF      0.02 sec, wall time      0.03 sec
converged SCF energy = 2.40527627549321
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.158753163276 AA    0.000000000000   0.000000000000   0.300000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 3.33333333333333
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.48


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmps7jvvbkv
max_memory 4000 MB (current use 159 MB)
cond(S) = 88.25761355974
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -3.2294796600941136  E_coul = 0.7589204381284491
init E= 0.862774111367669
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.891793419260006  LUMO = 1.86350602070556
  mo_energy =
[-0.89179342  1.86350602]
E1 = -3.3107250733964255  E_coul = 0.7681156159324172
cycle= 1 E= 0.790723875869325  delta_E= -0.0721  |g|= 1.18e-15  |ddm|= 0.793
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.887246920765796  LUMO = 1.88615792451407
  mo_energy =
[-0.88724692  1.88615792]
E1 = -3.3107250733964255  E_coul = 0.7681156159324172
cycle= 2 E= 0.790723875869325  delta_E=    0  |g|= 4.5e-16  |ddm|= 1.26e-15
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.887246920765796  LUMO = 1.88615792451407
  mo_energy =
[-0.88724692  1.88615792]
E1 = -3.3107250733964255  E_coul = 0.7681156159324172
Extra cycle  E= 0.790723875869325  delta_E=    0  |g|= 5.99e-16  |ddm|= 2.51e-15
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.03 sec
converged SCF energy = 0.790723875869325
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.211670884368 AA    0.000000000000   0.000000000000   0.400000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 2.5
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.51


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpu5e44orc
max_memory 4000 MB (current use 160 MB)
cond(S) = 50.21056151481804
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -3.142341396249112  E_coul = 0.7615474418677446
init E= 0.119206045618633
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.8597605051822  LUMO = 1.66037468980816
  mo_energy =
[-0.85976051  1.66037469]
E1 = -3.2445205063366007  E_coul = 0.7630652411156087
cycle= 1 E= 0.0185447347790078  delta_E= -0.101  |g|= 4.59e-15  |ddm|= 0.796
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.859195012052691  LUMO = 1.6863233939065
  mo_energy =
[-0.85919501  1.68632339]
E1 = -3.2445205063366016  E_coul = 0.7630652411156089
cycle= 2 E= 0.0185447347790073  delta_E= -4.44e-16  |g|= 4.32e-16  |ddm|= 8.01e-15
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.859195012052691  LUMO = 1.6863233939065
  mo_energy =
[-0.85919501  1.68632339]
E1 = -3.2445205063366016  E_coul = 0.7630652411156089
Extra cycle  E= 0.0185447347790073  delta_E=    0  |g|= 4.32e-16  |ddm|=    0
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = 0.0185447347790073
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.264588605460 AA    0.000000000000   0.000000000000   0.500000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 2
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.53


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpv9wratvw
max_memory 4000 MB (current use 160 MB)
cond(S) = 32.556565378055595
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -3.047861361814004  E_coul = 0.7644494845639906
init E= -0.283411877250013
    CPU time for initialize scf      0.01 sec, wall time      0.02 sec
  HOMO = -0.824886799908802  LUMO = 1.48595915692642
  mo_energy =
[-0.8248868   1.48595916]
E1 = -3.171976638746815  E_coul = 0.7568879513694957
cycle= 1 E= -0.415088687377319  delta_E= -0.132  |g|= 1.71e-15  |ddm|= 0.798
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.829100368003912  LUMO = 1.51591209440806
  mo_energy =
[-0.82910037  1.51591209]
E1 = -3.171976638746816  E_coul = 0.7568879513694962
cycle= 2 E= -0.415088687377319  delta_E=    0  |g|= 8.63e-16  |ddm|= 3.7e-15
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.829100368003912  LUMO = 1.51591209440806
  mo_energy =
[-0.82910037  1.51591209]
E1 = -3.1719766387468153  E_coul = 0.7568879513694957
Extra cycle  E= -0.415088687377319  delta_E=    0  |g|= 4.64e-16  |ddm|= 1.12e-15
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -0.415088687377319
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.317506326552 AA    0.000000000000   0.000000000000   0.600000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 1.66666666666667
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.56


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmp5k_jykok
max_memory 4000 MB (current use 160 MB)
cond(S) = 22.936826588370128
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -2.95024507645253  E_coul = 0.7673861743395458
init E= -0.516192235446317
    CPU time for initialize scf      0.01 sec, wall time      0.02 sec
  HOMO = -0.788646303318022  LUMO = 1.33407447599684
  mo_energy =
[-0.7886463   1.33407448]
E1 = -3.09602422337125  E_coul = 0.7497483150322142
cycle= 1 E= -0.679609241672369  delta_E= -0.163  |g|= 9.71e-16  |ddm|= 0.802
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.798263796653411  LUMO = 1.36859907448322
  mo_energy =
[-0.7982638   1.36859907]
E1 = -3.09602422337125  E_coul = 0.7497483150322142
cycle= 2 E= -0.679609241672369  delta_E=    0  |g|= 1.62e-17  |ddm|= 2.28e-15
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.798263796653411  LUMO = 1.36859907448322
  mo_energy =
[-0.7982638   1.36859907]
E1 = -3.0960242233712503  E_coul = 0.7497483150322144
Extra cycle  E= -0.679609241672369  delta_E= -4.44e-16  |g|= 3.29e-16  |ddm|= 6.28e-16
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -0.679609241672369
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.370424047644 AA    0.000000000000   0.000000000000   0.700000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 1.42857142857143
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.58


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpg16agfb8
max_memory 4000 MB (current use 160 MB)
cond(S) = 17.115127747611535
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -2.852476272844857  E_coul = 0.7701354032243675
init E= -0.653769441049061
    CPU time for initialize scf      0.01 sec, wall time      0.02 sec
  HOMO = -0.752066777346928  LUMO = 1.20013904228777
  mo_energy =
[-0.75206678  1.20013904]
E1 = -3.01870710226666  E_coul = 0.7418055196214226
cycle= 1 E= -0.848330154073809  delta_E= -0.195  |g|= 2.67e-16  |ddm|= 0.806
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.767548031511907  LUMO = 1.23966111805073
  mo_energy =
[-0.76754803  1.23966112]
E1 = -3.01870710226666  E_coul = 0.7418055196214228
cycle= 2 E= -0.848330154073809  delta_E=    0  |g|= 1.12e-15  |ddm|= 1.12e-15
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.767548031511907  LUMO = 1.23966111805073
  mo_energy =
[-0.76754803  1.23966112]
E1 = -3.01870710226666  E_coul = 0.7418055196214225
Extra cycle  E= -0.848330154073809  delta_E=    0  |g|= 7.39e-16  |ddm|= 1.43e-15
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -0.848330154073809
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.423341768736 AA    0.000000000000   0.000000000000   0.800000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 1.25
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.60


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpfue3ujrq
max_memory 4000 MB (current use 160 MB)
cond(S) = 13.320930160708421
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -2.7565432246557595  E_coul = 0.7725050927188393
init E= -0.73403813193692
    CPU time for initialize scf      0.01 sec, wall time      0.02 sec
  HOMO = -0.715851283295066  LUMO = 1.08153953901418
  mo_energy =
[-0.71585128  1.08153954]
E1 = -2.941426714268286  E_coul = 0.7332077633976727
cycle= 1 E= -0.958218950870613  delta_E= -0.224  |g|= 8.07e-16  |ddm|= 0.81
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.737505593736471  LUMO = 1.12634897546718
  mo_energy =
[-0.73750559  1.12634898]
E1 = -2.941426714268287  E_coul = 0.7332077633976728
cycle= 2 E= -0.958218950870614  delta_E= -8.88e-16  |g|= 5.02e-16  |ddm|= 1.5e-15
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.737505593736471  LUMO = 1.12634897546718
  mo_energy =
[-0.73750559  1.12634898]
E1 = -2.941426714268287  E_coul = 0.7332077633976728
Extra cycle  E= -0.958218950870614  delta_E=    0  |g|= 3.86e-16  |ddm|= 7.11e-16
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -0.958218950870614
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.476259489828 AA    0.000000000000   0.000000000000   0.900000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 1.11111111111111
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.63


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmp3r92r6am
max_memory 4000 MB (current use 160 MB)
cond(S) = 10.707897766991849
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -2.6637382028390464  E_coul = 0.7743389273040842
init E= -0.778288164423851
    CPU time for initialize scf      0.01 sec, wall time      0.02 sec
  HOMO = -0.680473964918308  LUMO = 0.976178144477584
  mo_energy =
[-0.68047396  0.97617814]
E1 = -2.865134560771783  E_coul = 0.7240901042413993
cycle= 1 E= -1.02993334541927  delta_E= -0.252  |g|= 6.15e-16  |ddm|= 0.815
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.708477176144492  LUMO = 1.02643927366295
  mo_energy =
[-0.70847718  1.02643927]
E1 = -2.865134560771782  E_coul = 0.7240901042413991
cycle= 2 E= -1.02993334541927  delta_E= 4.44e-16  |g|= 3.67e-16  |ddm|= 1.12e-15
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.708477176144492  LUMO = 1.02643927366294
  mo_energy =
[-0.70847718  1.02643927]
E1 = -2.865134560771782  E_coul = 0.7240901042413991
Extra cycle  E= -1.02993334541927  delta_E=    0  |g|= 3.67e-16  |ddm|=    0
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -1.02993334541927
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.529177210920 AA    0.000000000000   0.000000000000   1.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 1
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.65


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpvvbr_b5s
max_memory 4000 MB (current use 160 MB)
cond(S) = 8.829975102559038
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -2.5748824369891286  E_coul = 0.7755179111575614
init E= -0.799364525831567
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.646246068204434  LUMO = 0.882136572988119
  mo_energy =
[-0.64624607  0.88213657]
E1 = -2.790464718016715  E_coul = 0.7145743102869977
cycle= 1 E= -1.07589040772972  delta_E= -0.277  |g|= 1.03e-16  |ddm|= 0.821
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.68065804872136  LUMO = 0.937901335633742
  mo_energy =
[-0.68065805  0.93790134]
E1 = -2.790464718016715  E_coul = 0.7145743102869977
cycle= 2 E= -1.07589040772972  delta_E=    0  |g|= 1.03e-16  |ddm|=    0
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.68065804872136  LUMO = 0.937901335633742
  mo_energy =
[-0.68065805  0.93790134]
E1 = -2.790464718016715  E_coul = 0.7145743102869977
Extra cycle  E= -1.07589040772972  delta_E=    0  |g|= 1.03e-16  |ddm|=    0
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -1.07589040772972
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.582094932012 AA    0.000000000000   0.000000000000   1.100000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.909090909090909
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.68


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpplajq4xs
max_memory 4000 MB (current use 160 MB)
cond(S) = 7.433859308295806
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -2.4904645681917117  E_coul = 0.7759594790378967
init E= -0.805414180062906
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.613363676193394  LUMO = 0.797765518304722
  mo_energy =
[-0.61336368  0.79776552]
E1 = -2.717829481491826  E_coul = 0.7047694372889991
cycle= 1 E= -1.10396913511192  delta_E= -0.299  |g|= 2.61e-16  |ddm|= 0.827
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.654145303456914  LUMO = 0.858988030340855
  mo_energy =
[-0.6541453   0.85898803]
E1 = -2.717829481491826  E_coul = 0.7047694372889991
cycle= 2 E= -1.10396913511192  delta_E=    0  |g|= 2.61e-16  |ddm|=    0
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.654145303456914  LUMO = 0.858988030340855
  mo_energy =
[-0.6541453   0.85898803]
E1 = -2.717829481491826  E_coul = 0.7047694372889991
Extra cycle  E= -1.10396913511192  delta_E=    0  |g|= 2.61e-16  |ddm|=    0
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -1.10396913511192
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.635012653104 AA    0.000000000000   0.000000000000   1.200000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.833333333333333
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.70


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmp69b_rr_u
max_memory 4000 MB (current use 160 MB)
cond(S) = 6.366960603009554
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -2.410727778846793  E_coul = 0.7756150118238994
init E= -0.80177943368956
    CPU time for initialize scf      0.01 sec, wall time      0.02 sec
  HOMO = -0.581939900646887  LUMO = 0.721720866774153
  mo_energy =
[-0.5819399   0.72172087]
E1 = -2.6474835813102042  E_coul = 0.6947726002470075
cycle= 1 E= -1.11937764772986  delta_E= -0.318  |g|= 6.65e-16  |ddm|= 0.833
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.628969190408095  LUMO = 0.788272403928184
  mo_energy =
[-0.62896919  0.7882724 ]
E1 = -2.6474835813102047  E_coul = 0.6947726002470077
cycle= 2 E= -1.11937764772986  delta_E= -4.44e-16  |g|= 3.03e-16  |ddm|= 1.43e-15
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.628969190408095  LUMO = 0.788272403928184
  mo_energy =
[-0.62896919  0.7882724 ]
E1 = -2.6474835813102047  E_coul = 0.6947726002470079
Extra cycle  E= -1.11937764772986  delta_E= 4.44e-16  |g|= 2.39e-16  |ddm|= 3.14e-16
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -1.11937764772986
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.687930374196 AA    0.000000000000   0.000000000000   1.300000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.769230769230769
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.72


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpbnyrgdq_
max_memory 4000 MB (current use 160 MB)
cond(S) = 5.53285126863681
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -2.3357342481850063  E_coul = 0.7744661838192604
init E= -0.792037295134977
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.552027387707631  LUMO = 0.652923285916653
  mo_energy =
[-0.55202739  0.65292329]
E1 = -2.579568608878838  E_coul = 0.6846698195169294
cycle= 1 E= -1.12566802013114  delta_E= -0.334  |g|= 2.28e-16  |ddm|= 0.841
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.60511448492249  LUMO = 0.72460697269418
  mo_energy =
[-0.60511448  0.72460697]
E1 = -2.5795686088788385  E_coul = 0.6846698195169296
cycle= 2 E= -1.12566802013114  delta_E= -2.22e-16  |g|= 2.78e-16  |ddm|= 2.72e-16
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.60511448492249  LUMO = 0.72460697269418
  mo_energy =
[-0.60511448  0.72460697]
E1 = -2.5795686088788377  E_coul = 0.6846698195169293
Extra cycle  E= -1.12566802013114  delta_E= 6.66e-16  |g|= 8.94e-16  |ddm|= 1.09e-15
    CPU time for scf_cycle      0.02 sec, wall time      0.03 sec
    CPU time for SCF      0.02 sec, wall time      0.03 sec
converged SCF energy = -1.12566802013114
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.740848095288 AA    0.000000000000   0.000000000000   1.400000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.714285714285714
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.75


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpf80khurm
max_memory 4000 MB (current use 160 MB)
cond(S) = 4.868134253383172
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -2.2654182519660075  E_coul = 0.7725205377040725
init E= -0.778611999976221
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.523635799349397  LUMO = 0.590498031857627
  mo_energy =
[-0.5236358   0.59049803]
E1 = -2.514147015606131  E_coul = 0.6745369341376684
cycle= 1 E= -1.12532436718275  delta_E= -0.347  |g|= 9.52e-17  |ddm|= 0.849
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.582536573665397  LUMO = 0.667062741198814
  mo_energy =
[-0.58253657  0.66706274]
E1 = -2.514147015606131  E_coul = 0.6745369341376684
cycle= 2 E= -1.12532436718275  delta_E=    0  |g|= 9.52e-17  |ddm|=    0
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.582536573665397  LUMO = 0.667062741198814
  mo_energy =
[-0.58253657  0.66706274]
E1 = -2.514147015606131  E_coul = 0.6745369341376684
Extra cycle  E= -1.12532436718275  delta_E=    0  |g|= 9.52e-17  |ddm|=    0
    CPU time for scf_cycle      0.02 sec, wall time      0.03 sec
    CPU time for SCF      0.02 sec, wall time      0.03 sec
converged SCF energy = -1.12532436718275
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.793765816380 AA    0.000000000000   0.000000000000   1.500000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.666666666666667
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.77


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpnj74fg3i
max_memory 4000 MB (current use 160 MB)
cond(S) = 4.329719220964145
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -2.1996293383325742  E_coul = 0.7698067148745471
init E= -0.763155956791361
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.49674559915556  LUMO = 0.533722432947058
  mo_energy =
[-0.4967456   0.53372243]
E1 = -2.451228472658564  E_coul = 0.6644405669702402
cycle= 1 E= -1.12012123902166  delta_E= -0.357  |g|= 5.84e-17  |ddm|= 0.858
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.561173669359042  LUMO = 0.614875580390176
  mo_energy =
[-0.56117367  0.61487558]
E1 = -2.4512284726585643  E_coul = 0.6644405669702402
cycle= 2 E= -1.12012123902166  delta_E= -4.44e-16  |g|= 5.84e-17  |ddm|= 3.14e-16
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.561173669359042  LUMO = 0.614875580390176
  mo_energy =
[-0.56117367  0.61487558]
E1 = -2.4512284726585643  E_coul = 0.6644405669702402
Extra cycle  E= -1.12012123902166  delta_E=    0  |g|= 5.84e-17  |ddm|=    0
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -1.12012123902166
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.846683537472 AA    0.000000000000   0.000000000000   1.600000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.625
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.80


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmptaly39ag
max_memory 4000 MB (current use 160 MB)
cond(S) = 3.8874760222917506
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -2.138165124085689  E_coul = 0.7663697313336884
init E= -0.746795392752001
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.471318176133076  LUMO = 0.481986642737134
  mo_energy =
[-0.47131818  0.48198664]
E1 = -2.390788808178951  E_coul = 0.6544390940702783
cycle= 1 E= -1.11134971410867  delta_E= -0.365  |g|= 5.98e-17  |ddm|= 0.868
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.540955310019197  LUMO = 0.567405696592669
  mo_energy =
[-0.54095531  0.5674057 ]
E1 = -2.39078880817895  E_coul = 0.6544390940702781
cycle= 2 E= -1.11134971410867  delta_E= 8.88e-16  |g|= 1.86e-16  |ddm|= 5.21e-16
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.540955310019197  LUMO = 0.567405696592669
  mo_energy =
[-0.54095531  0.5674057 ]
E1 = -2.3907888081789506  E_coul = 0.6544390940702781
Extra cycle  E= -1.11134971410867  delta_E= -4.44e-16  |g|= 5.98e-17  |ddm|= 3.14e-16
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -1.11134971410867
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.899601258564 AA    0.000000000000   0.000000000000   1.700000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.588235294117647
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.82


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmphwhfbhfx
max_memory 4000 MB (current use 160 MB)
cond(S) = 3.5198144965773643
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -2.0807945175163045  E_coul = 0.762266588715093
init E= -0.730292634683564
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.447302732815695  LUMO = 0.434766413542345
  mo_energy =
[-0.44730273  0.43476641]
E1 = -2.332782485247086  E_coul = 0.6445835528759885
cycle= 1 E= -1.09996363825345  delta_E= -0.37  |g|= 1.7e-16  |ddm|= 0.878
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.521807689747555  LUMO = 0.52410904535241
  mo_energy =
[-0.52180769  0.52410905]
E1 = -2.332782485247086  E_coul = 0.6445835528759885
cycle= 2 E= -1.09996363825345  delta_E=    0  |g|= 1.7e-16  |ddm|=    0
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.521807689747555  LUMO = 0.52410904535241
  mo_energy =
[-0.52180769  0.52410905]
E1 = -2.332782485247086  E_coul = 0.6445835528759885
Extra cycle  E= -1.09996363825345  delta_E=    0  |g|= 1.7e-16  |ddm|=    0
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -1.09996363825345
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:19 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   0.952518979656 AA    0.000000000000   0.000000000000   1.800000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.555555555555556
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.85


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpmpk_8zo5
max_memory 4000 MB (current use 160 MB)
cond(S) = 3.210929103647412
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -2.0272733374880483  E_coul = 0.7575623898901347
init E= -0.714155392042358
    CPU time for initialize scf      0.01 sec, wall time      0.02 sec
  HOMO = -0.424640887944087  LUMO = 0.391605207344103
  mo_energy =
[-0.42464089  0.39160521]
E1 = -2.277150579266398  E_coul = 0.6349184303099624
cycle= 1 E= -1.08667659340088  delta_E= -0.373  |g|= 6.58e-16  |ddm|= 0.889
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.503656859323237  LUMO = 0.484518080046586
  mo_energy =
[-0.50365686  0.48451808]
E1 = -2.277150579266398  E_coul = 0.6349184303099624
cycle= 2 E= -1.08667659340088  delta_E=    0  |g|= 5.45e-16  |ddm|= 1.41e-15
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.503656859323237  LUMO = 0.484518080046587
  mo_energy =
[-0.50365686  0.48451808]
E1 = -2.277150579266398  E_coul = 0.6349184303099622
Extra cycle  E= -1.08667659340088  delta_E= -2.22e-16  |g|= 9.45e-17  |ddm|= 9.68e-16
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -1.08667659340088
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:20 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   1.005436700748 AA    0.000000000000   0.000000000000   1.900000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.526315789473684
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.87


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmp8_457ni2
max_memory 4000 MB (current use 160 MB)
cond(S) = 2.9490279035240654
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -1.9773545260491328  E_coul = 0.7523270247131157
init E= -0.698711711862333
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.403269932493614  LUMO = 0.352102654072039
  mo_energy =
[-0.40326993  0.35210265]
E1 = -2.2238261505918455  E_coul = 0.625482296973131
cycle= 1 E= -1.07202806414503  delta_E= -0.373  |g|= 2.32e-16  |ddm|= 0.901
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.486430778322792  LUMO = 0.448228893844814
  mo_energy =
[-0.48643078  0.44822889]
E1 = -2.2238261505918455  E_coul = 0.625482296973131
cycle= 2 E= -1.07202806414503  delta_E=    0  |g|= 2.32e-16  |ddm|=    0
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.486430778322792  LUMO = 0.448228893844814
  mo_energy =
[-0.48643078  0.44822889]
E1 = -2.2238261505918455  E_coul = 0.625482296973131
Extra cycle  E= -1.07202806414503  delta_E=    0  |g|= 2.32e-16  |ddm|=    0
    CPU time for scf_cycle      0.02 sec, wall time      0.03 sec
    CPU time for SCF      0.02 sec, wall time      0.03 sec
converged SCF energy = -1.07202806414503
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:20 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   1.058354421840 AA    0.000000000000   0.000000000000   2.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.5
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.90


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpzrxhdwvi
max_memory 4000 MB (current use 160 MB)
cond(S) = 2.725163451102817
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -1.9307947573368254  E_coul = 0.7466324208024107
init E= -0.684162336534415
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.383125316267418  LUMO = 0.315906645079403
  mo_energy =
[-0.38312532  0.31590665]
E1 = -2.1727381669132053  E_coul = 0.6163082847434688
cycle= 1 E= -1.05642988216974  delta_E= -0.372  |g|= 5.68e-16  |ddm|= 0.914
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.470060798713134  LUMO = 0.414892072584251
  mo_energy =
[-0.4700608   0.41489207]
E1 = -2.1727381669132058  E_coul = 0.6163082847434691
cycle= 2 E= -1.05642988216974  delta_E= -2.22e-16  |g|= 1.75e-16  |ddm|= 1.3e-15
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.470060798713134  LUMO = 0.414892072584251
  mo_energy =
[-0.4700608   0.41489207]
E1 = -2.1727381669132058  E_coul = 0.6163082847434691
Extra cycle  E= -1.05642988216974  delta_E=    0  |g|= 3.73e-16  |ddm|= 3.14e-16
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.03 sec
converged SCF energy = -1.05642988216974
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:20 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   1.111272142932 AA    0.000000000000   0.000000000000   2.100000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.476190476190476
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.92


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpaenf16ov
max_memory 4000 MB (current use 160 MB)
cond(S) = 2.5324427583444056
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -1.8873586908571502  E_coul = 0.7405503171046589
init E= -0.670617897562015
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.364142593141412  LUMO = 0.282707144539845
  mo_energy =
[-0.36414259  0.28270714]
E1 = -2.123814431145461  E_coul = 0.6074244311157672
cycle= 1 E= -1.04019952383922  delta_E= -0.37  |g|= 9.81e-17  |ddm|= 0.927
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.454482784456963  LUMO = 0.384205358353381
  mo_energy =
[-0.45448278  0.38420536]
E1 = -2.123814431145462  E_coul = 0.6074244311157677
cycle= 2 E= -1.04019952383922  delta_E= -2.22e-16  |g|= 2.04e-16  |ddm|= 7.28e-16
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.454482784456963  LUMO = 0.384205358353382
  mo_energy =
[-0.45448278  0.38420536]
E1 = -2.123814431145461  E_coul = 0.6074244311157672
Extra cycle  E= -1.04019952383922  delta_E= 2.22e-16  |g|= 9.81e-17  |ddm|= 7.28e-16
    CPU time for scf_cycle      0.02 sec, wall time      0.03 sec
    CPU time for SCF      0.02 sec, wall time      0.03 sec
converged SCF energy = -1.04019952383922
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:20 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   1.164189864024 AA    0.000000000000   0.000000000000   2.200000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.454545454545455
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.95


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpe8n22xtl
max_memory 4000 MB (current use 160 MB)
cond(S) = 2.3654822299590172
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -1.8468216574539356  E_coul = 0.7341505050200361
init E= -0.658125697888445
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.346258879442899  LUMO = 0.25223072732059
  mo_energy =
[-0.34625888  0.25223073]
E1 = -2.0769836314152696  E_coul = 0.5988539288643943
cycle= 1 E= -1.02358424800542  delta_E= -0.365  |g|= 1.9e-16  |ddm|= 0.941
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.439637886843241  LUMO = 0.355907141812681
  mo_energy =
[-0.43963789  0.35590714]
E1 = -2.0769836314152696  E_coul = 0.598853928864394
cycle= 2 E= -1.02358424800542  delta_E= -4.44e-16  |g|= 1.39e-17  |ddm|= 6.66e-16
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.439637886843241  LUMO = 0.355907141812681
  mo_energy =
[-0.43963789  0.35590714]
E1 = -2.0769836314152696  E_coul = 0.598853928864394
Extra cycle  E= -1.02358424800542  delta_E=    0  |g|= 1.39e-17  |ddm|=    0
    CPU time for scf_cycle      0.02 sec, wall time      0.03 sec
    CPU time for SCF      0.02 sec, wall time      0.03 sec
converged SCF energy = -1.02358424800542
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:20 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   1.217107585116 AA    0.000000000000   0.000000000000   2.300000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.434782608695652
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         1.98


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpukiziftg
max_memory 4000 MB (current use 160 MB)
cond(S) = 2.220024553914179
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -1.8089712627154007  E_coul = 0.7274994817231726
init E= -0.646689172296576
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.329413852079172  LUMO = 0.224235539610523
  mo_energy =
[-0.32941385  0.22423554]
E1 = -2.032176582060551  E_coul = 0.5906153237321028
cycle= 1 E= -1.0067786496328  delta_E= -0.36  |g|= 2.85e-16  |ddm|= 0.956
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.425472967298173  LUMO = 0.329770484542947
  mo_energy =
[-0.42547297  0.32977048]
E1 = -2.0321765820605515  E_coul = 0.590615323732103
cycle= 2 E= -1.0067786496328  delta_E=    0  |g|= 1.38e-17  |ddm|= 6.66e-16
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.425472967298173  LUMO = 0.329770484542947
  mo_energy =
[-0.42547297  0.32977048]
E1 = -2.032176582060551  E_coul = 0.5906153237321028
Extra cycle  E= -1.0067786496328  delta_E=    0  |g|= 3.96e-16  |ddm|= 3.68e-16
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -1.0067786496328
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:20 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   1.270025306208 AA    0.000000000000   0.000000000000   2.400000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.416666666666667
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         2.00


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpvjgnffby
max_memory 4000 MB (current use 160 MB)
cond(S) = 2.092664840926037
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -1.7736082157199022  E_coul = 0.7206594644126657
init E= -0.63628208464057
    CPU time for initialize scf      0.01 sec, wall time      0.02 sec
  HOMO = -0.313550342398592  LUMO = 0.198506715136786
  mo_energy =
[-0.31355034  0.19850672]
E1 = -1.989326786354295  E_coul = 0.5827226985359379
cycle= 1 E= -0.98993742115169  delta_E= -0.354  |g|= 5.75e-16  |ddm|= 0.97
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.41194069464121  LUMO = 0.305597706167739
  mo_energy =
[-0.41194069  0.30559771]
E1 = -1.9893267863542945  E_coul = 0.5827226985359375
cycle= 2 E= -0.98993742115169  delta_E=    0  |g|= 1.77e-18  |ddm|= 1.36e-15
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.41194069464121  LUMO = 0.305597706167739
  mo_energy =
[-0.41194069  0.30559771]
E1 = -1.9893267863542943  E_coul = 0.5827226985359373
Extra cycle  E= -0.98993742115169  delta_E=    0  |g|= 1.77e-18  |ddm|= 3.85e-16
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -0.98993742115169
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:20 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   1.322943027300 AA    0.000000000000   0.000000000000   2.500000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.4
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         2.03


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpi11t_e2q
max_memory 4000 MB (current use 160 MB)
cond(S) = 1.9806518024294768
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -1.7405465935223137  E_coul = 0.7136877181139116
init E= -0.626858875408402
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.298614607757225  LUMO = 0.174852351832356
  mo_energy =
[-0.29861461  0.17485235]
E1 = -1.9483705005533438  E_coul = 0.5751858728657613
cycle= 1 E= -0.973184627687583  delta_E= -0.346  |g|= 4.33e-16  |ddm|= 0.986
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.398999377410911  LUMO = 0.283215640301967
  mo_energy =
[-0.39899938  0.28321564]
E1 = -1.948370500553344  E_coul = 0.5751858728657613
cycle= 2 E= -0.973184627687583  delta_E= -2.22e-16  |g|= 2.06e-16  |ddm|= 7.85e-16
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.398999377410911  LUMO = 0.283215640301967
  mo_energy =
[-0.39899938  0.28321564]
E1 = -1.948370500553345  E_coul = 0.5751858728657617
Extra cycle  E= -0.973184627687583  delta_E= -4.44e-16  |g|= 1.62e-16  |ddm|= 9.35e-16
    CPU time for scf_cycle      0.03 sec, wall time      0.04 sec
    CPU time for SCF      0.04 sec, wall time      0.04 sec
converged SCF energy = -0.973184627687583
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:20 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   1.375860748392 AA    0.000000000000   0.000000000000   2.600000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.384615384615385
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         2.07


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpot3wb1ed
max_memory 4000 MB (current use 160 MB)
cond(S) = 1.8817413224502926
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -1.7096136970623155  E_coul = 0.7066361521438655
init E= -0.618362160303065
    CPU time for initialize scf      0.01 sec, wall time      0.02 sec
  HOMO = -0.284556367307561  LUMO = 0.153100101554727
  mo_energy =
[-0.28455637  0.1531001 ]
E1 = -1.9092464802195557  E_coul = 0.56801063654175
cycle= 1 E= -0.956620459062421  delta_E= -0.338  |g|= 2.78e-16  |ddm|=    1
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.386612603568028  LUMO = 0.262471608530766
  mo_energy =
[-0.3866126   0.26247161]
E1 = -1.9092464802195555  E_coul = 0.5680106365417498
cycle= 2 E= -0.956620459062421  delta_E=    0  |g|= 9.13e-17  |ddm|= 6.18e-16
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.386612603568028  LUMO = 0.262471608530766
  mo_energy =
[-0.3866126   0.26247161]
E1 = -1.9092464802195555  E_coul = 0.5680106365417498
Extra cycle  E= -0.956620459062421  delta_E=    0  |g|= 1.06e-16  |ddm|= 3.14e-16
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -0.956620459062421
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:20 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   1.428778469484 AA    0.000000000000   0.000000000000   2.700000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.37037037037037
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         2.09


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmp_zgrogeo
max_memory 4000 MB (current use 160 MB)
cond(S) = 1.7940871700841021
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -1.6806496203423233  E_coul = 0.6995511419126778
init E= -0.610728108059275
    CPU time for initialize scf      0.01 sec, wall time      0.02 sec
  HOMO = -0.271328677495994  LUMO = 0.13309435164094
  mo_energy =
[-0.27132868  0.13309435]
E1 = -1.8718955579227394  E_coul = 0.5611990244510077
cycle= 1 E= -0.940326163101361  delta_E= -0.33  |g|= 4.04e-16  |ddm|= 1.02
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.374748754510362  LUMO = 0.243230085515951
  mo_energy =
[-0.37474875  0.24323009]
E1 = -1.8718955579227397  E_coul = 0.5611990244510079
cycle= 2 E= -0.940326163101361  delta_E=    0  |g|= 2.3e-16  |ddm|= 1.18e-15
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.374748754510362  LUMO = 0.243230085515951
  mo_energy =
[-0.37474875  0.24323009]
E1 = -1.8718955579227397  E_coul = 0.5611990244510077
Extra cycle  E= -0.940326163101362  delta_E= -2.22e-16  |g|= 4.97e-16  |ddm|= 7.85e-16
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -0.940326163101362
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:20 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   1.481696190576 AA    0.000000000000   0.000000000000   2.800000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.357142857142857
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         2.11


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpk4xq7ixg
max_memory 4000 MB (current use 160 MB)
cond(S) = 1.7161584139624668
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -1.6535066304399915  E_coul = 0.6924735343071213
init E= -0.603890238990013
    CPU time for initialize scf      0.01 sec, wall time      0.02 sec
  HOMO = -0.258887706865767  LUMO = 0.114693927830023
  mo_energy =
[-0.25888771  0.11469393]
E1 = -1.836260160319374  E_coul = 0.554749631692353
cycle= 1 E= -0.924367671484164  delta_E= -0.32  |g|= 3.94e-16  |ddm|= 1.03
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.363380448467334  LUMO = 0.225369977294495
  mo_energy =
[-0.36338045  0.22536998]
E1 = -1.8362601603193736  E_coul = 0.5547496316923528
cycle= 2 E= -0.924367671484164  delta_E= 2.22e-16  |g|= 7.96e-17  |ddm|= 1.01e-15
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.363380448467334  LUMO = 0.225369977294494
  mo_energy =
[-0.36338045  0.22536998]
E1 = -1.8362601603193736  E_coul = 0.5547496316923528
Extra cycle  E= -0.924367671484164  delta_E=    0  |g|= 7.96e-17  |ddm|=    0
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -0.924367671484164
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:20 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   1.534613911668 AA    0.000000000000   0.000000000000   2.900000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.344827586206897
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         2.14


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpg3402n8m
max_memory 4000 MB (current use 160 MB)
cond(S) = 1.6466762901847323
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -1.6280484359659426  E_coul = 0.6854387971625386
init E= -0.597782052596507
    CPU time for initialize scf      0.01 sec, wall time      0.02 sec
  HOMO = -0.247192455616775  LUMO = 0.097770230158863
  mo_energy =
[-0.24719246  0.09777023]
E1 = -1.8022838371168015  E_coul = 0.5486579617856859
cycle= 1 E= -0.908798289124219  delta_E= -0.311  |g|= 3.49e-16  |ddm|= 1.05
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.352483956772715  LUMO = 0.208782415756943
  mo_energy =
[-0.35248396  0.20878242]
E1 = -1.8022838371168013  E_coul = 0.5486579617856857
cycle= 2 E= -0.908798289124219  delta_E=    0  |g|= 3.78e-17  |ddm|= 6.66e-16
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.352483956772715  LUMO = 0.208782415756943
  mo_energy =
[-0.35248396  0.20878242]
E1 = -1.8022838371168013  E_coul = 0.5486579617856857
Extra cycle  E= -0.908798289124219  delta_E=    0  |g|= 3.78e-17  |ddm|=    0
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -0.908798289124219
#INFO: **** input file is /n/home06/mbritt/VAFQMC/importancevafqmc/pesplot.py ****
import pandas as pd
from pyscf import gto, fci, scf
import glob
import os
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append('../')
from afqmc.utils import reblock

ipieenergy = []
ipieerror = []
vafqmcenergy = []
vafqmcerror = []
distances = []
fcienergies = []

nan_distances = []
for csv_path in sorted(glob.glob("csv/h2-*.csv")):  # Now looking directly in 'csv'
    match = re.search(r"h2-(\d+\.?\d*).csv", csv_path)
    if match:
            dist = float(match.group(1))
            df = pd.read_csv(csv_path)
            # Check for NaNs
   #         if df['ipie-ETotal'].isna().any() or df['vafqmc-ETotal'].isna().any():
    #            nan_distances.append(dist)
     #           continue  # Skip this distance but keep going

            try:
                reblocked_ipie = reblock(df['ipie-ETotal'].dropna())
                reblocked_vafqmc = reblock(df['vafqmc-ETotal'])

                distances.append(dist)
                ipieenergy.append(reblocked_ipie['ETotal_ac'].values[0])
                vafqmcenergy.append(reblocked_vafqmc['ETotal_ac'].values[0])
                ipieerror.append(reblocked_ipie['ETotal_error_ac'].values[0])
                vafqmcerror.append(reblocked_vafqmc['ETotal_error_ac'].values[0])
            
            
            except Exception as e:
                print(f"Error processing distance {dist}: {e}")
                nan_distances.append(dist)
                continue  # Skip this iteration safely
        
# Print distances that were skipped due to NaNs
if nan_distances:
    print(f"Skipped distances due to NaNs: {sorted(nan_distances)}")
sorted_indices = np.argsort(distances)
sorted_distances = np.array(distances)[sorted_indices]
sorted_ipieenergy = np.array(ipieenergy)[sorted_indices]
sorted_vafqmcenergy = np.array(vafqmcenergy)[sorted_indices]
sorted_ipieerror = np.array(ipieerror)[sorted_indices]
sorted_vafqmcerror = np.array(vafqmcerror)[sorted_indices]

for dist in sorted_distances:
    natoms = 2
    time = 50
    mol = gto.M(
    atom=[("H", 0, 0, i * dist) for i in range(natoms)],
    basis='sto-6g',
    unit='Bohr',
    verbose=5  
    )
    mf = scf.RHF(mol)
    hf_energy = mf.kernel()
    cisolver = fci.FCI(mf)
    fci_energy = cisolver.kernel()[0]
    fcienergies.append(fci_energy)
# Create the plot
plt.figure(figsize=(8, 6))

# Plot IPIE data with error bars
plt.errorbar(sorted_distances, sorted_ipieenergy, yerr=sorted_ipieerror, fmt='o-',
             label="IPIE", capsize=3, markersize=5, color='blue')

# Plot VAFQMC data with error bars
plt.errorbar(sorted_distances, sorted_vafqmcenergy, yerr=sorted_vafqmcerror, fmt='s-',
             label="VAFQMC", capsize=3, markersize=5, color='red')
plt.plot(sorted_distances, fcienergies, label="fci", linestyle = '--', color = 'green')
# Labels and legend
plt.xlabel("H2 Bond Distance (Å)", fontsize=12)
plt.ylabel("Total Energy (Ha)", fontsize=12)
plt.title("Energy Comparison: IPIE vs. VAFQMC", fontsize=14)
plt.ylim(-1.15,-0.8)
plt.legend()
plt.grid(True)

# Save the figure
plt.show()
plt.savefig("energy_comparison.png", dpi=300, bbox_inches="tight")
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='holy8a32606.rc.fas.harvard.edu', release='4.18.0-513.18.1.el8_9.x86_64', version='#1 SMP Wed Feb 21 21:34:36 UTC 2024', machine='x86_64')  Threads 1
Python 3.12.4 | packaged by conda-forge | (main, Jun 17 2024, 10:23:07) [GCC 12.3.0]
numpy 2.0.0  scipy 1.14.0  h5py 3.11.0
Date: Fri Mar 14 00:43:20 2025
PySCF version 2.6.2
PySCF path  /n/home06/mbritt/.conda/envs/afqmc_env/lib/python3.12/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 5
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = Bohr
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      0.000000000000   0.000000000000   1.587531632760 AA    0.000000000000   0.000000000000   3.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] H
[INPUT] 0    0    [6    /1   ]  35.52322122       0.00916359628
                                6.513143725       0.04936149294
                                1.822142904       0.1685383049
                                0.625955266       0.3705627997
                                0.243076747       0.4164915298
                                0.100112428       0.1303340841

nuclear repulsion = 0.333333333333333
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = sto-6g
ecp = {}
CPU time:         2.16


******** <class 'pyscf.scf.hf.RHF'> ********
method = RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /tmp/tmpgql9_oym
max_memory 4000 MB (current use 160 MB)
cond(S) = 1.584565421581352
Set gradient conv threshold to 3.16228e-05
Initial guess from minao.
E1 = -1.60414940391195  E_coul = 0.6784772765480633
init E= -0.592338794030553
    CPU time for initialize scf      0.01 sec, wall time      0.02 sec
  HOMO = -0.236204454589085  LUMO = 0.0822057168274447
  mo_energy =
[-0.23620445  0.08220572]
E1 = -1.769910848573264  E_coul = 0.5429167971455642
cycle= 1 E= -0.893660718094367  delta_E= -0.301  |g|= 2.76e-16  |ddm|= 1.06
    CPU time for cycle= 1      0.00 sec, wall time      0.00 sec
  HOMO = -0.342038627141068  LUMO = 0.193368975141604
  mo_energy =
[-0.34203863  0.19336898]
E1 = -1.7699108485732633  E_coul = 0.5429167971455635
cycle= 2 E= -0.893660718094367  delta_E=    0  |g|= 1.46e-16  |ddm|= 1.01e-15
    CPU time for cycle= 2      0.00 sec, wall time      0.00 sec
  HOMO = -0.342038627141068  LUMO = 0.193368975141604
  mo_energy =
[-0.34203863  0.19336898]
E1 = -1.7699108485732638  E_coul = 0.542916797145564
Extra cycle  E= -0.893660718094367  delta_E=    0  |g|= 2.29e-16  |ddm|= 6.38e-16
    CPU time for scf_cycle      0.02 sec, wall time      0.02 sec
    CPU time for SCF      0.02 sec, wall time      0.02 sec
converged SCF energy = -0.893660718094367
